#!/usr/bin/env perl

#  runtest -- run regression tests
#  Copyright (C) 2002-2014 Dieter Baron and Thomas Klausner
#
#  This file is part of ckmame, a program to check rom sets for MAME.
#  The authors can be contacted at <ckmame@nih.at>
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#  3. The names of the authors may not be used to endorse or promote
#     products derived from this software without specific prior
#     written permission.
# 
#  THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS
#  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
#  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
#  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
#  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
#  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


use strict;

BEGIN { push @INC, '@abs_srcdir@'; }

use CkmameDB;
use NiHTest;

my $test = NiHTest::new({ default_program => 'ckmame', srcdir => '@srcdir@' });

my $roms_uncompressed = 0;


sub check_ckmame_db {
	my ($test, $dir) = @_;
	
	my $dump_expected = undef;
	
	if (defined($test->{test}->{'ckmamedb-after'})) {
		for my $args (@{$test->{test}->{'ckmamedb-after'}}) {
			if ($args->[0] eq $dir) {
				my $dumpfile = $test->find_file($args->[1]);
				return undef unless ($dumpfile);
				
				my $fh;
				unless (open($fh, "< $dumpfile")) {
					print STDERR "can't open $dumpfile: $!";
					return undef;
				}
				$dump_expected = [ map { chomp; $_; } <$fh> ];
				close($fh);
				last;
			}
		}
	}
	
	my $db = new CkmameDB($dir, undef, $roms_uncompressed, $test->{test}->{'no-hashes'});
	
	if (!$db) {
		print "opening $dir/.ckmame.db failed\n" if ($test->{verbose});
		return undef;
	}

	return undef unless ($db->read_db());
	if (!defined($dump_expected)) {
		return undef unless ($db->read_archives() && $db->make_dump());
		$dump_expected = $db->{dump_expected};
	}
	
	return $test->compare_arrays($dump_expected, $db->{dump_got}, "$dir/.ckmame.db");
}


sub checks {
	my ($test, $hook) = @_;

	#return 1 unless ($roms_uncompressed);

	my %checked = ();
	
	my $ok = 1;
	my $error = 0;

	my $dir;
	unless (opendir($dir, '.')) {
	    print STDERR "cannot list '.': $!\n";
	    return undef;
	}

	while (my $name = readdir $dir) {
	    next if ($name eq '.' || $name eq '..' || $name =~ m/sample|unknown/);
	    next unless (-d $name);

	    my $ret = check_ckmame_db($test, $name);
	    $checked{$name} = 1;
	    
	    if (!defined($ret)) {
		    $error = 1;
		    next;
	    }
	    elsif ($ret != 1) {
		$ok = 0;
	    }
	}
	closedir $dir;

	if (defined($test->{test}->{'ckmamedb-after'})) {
	    for my $entry (@{$test->{test}->{'ckmamedb-after'}}) {
		my $name = $entry->[0];
		next if ($checked{$name});
		
		my $ret = check_ckmame_db($test, $name);
		$checked{$name} = 1;
		
		if (!defined($ret)) {
		    return undef;
		}
		elsif ($ret != 1) {
		    $ok = 0;
		}
	    }
	}
	    
	push @{$test->{failed}}, 'ckmame.db' unless ($ok);
	
	return $error ? undef : 1;
}

sub comparator_db {
	my ($test, $got, $expected) = @_;
	# $got -- db
	# $expected -- db dump

	my $cmd = "../dbdump \"$got\" | diff " . ($test->{verbose} ? '-u' : '-q') . " \"$expected\" -";
	my $ret = system($cmd);
    
	return $ret == 0;
}

sub comparator_zip {
	my ($test, $got, $expected) = @_;

	return undef unless ($roms_uncompressed);

	$got =~ s/\.zip//;
	return NiHTest::comparator_zip($test, $got, $expected);
}


sub copier_zip {
	my ($test, $src, $dest) = @_;

	return undef unless ($roms_uncompressed);

	$dest =~ s/\.zip$//;

	return system('unzip', '-qd', $dest, $src) == 0;
}


sub mangle_program {
	my ($test, $hook) = @_;

	$test->{test}->{program} =  "../src/$test->{test}->{program}";

	return 1;
}


sub post_list_files {
	my ($test, $hook) = @_;

	my %got = ();
		
	for my $file (@{$test->{files_got}}) {
		next if ($file =~ '/.ckmame.db$');
		if ($roms_uncompressed && $file =~ m,((?:extra|extradir|moreroms|needed|roms|samples|search|unknown)/[^/]*)/,) {
			$got{"$1.zip"} = 1;
		}
		else {
			$got{$file} = 1;
		}
	}
	$test->{files_got} = [sort keys %got];

	return 1;
}


sub post_parse {
	my ($test, $hook) = @_;

	if (!defined($test->{test}->{'archive-types'})) {
		$test->{test}->{'archive-types'} = $test->{test}->{program} =~ m/ckmame$/ ? ['zip', 'dir'] : ['zip'];
	}

	if ($test->{test}->{mkdbargs}) {
		$test->add_file({ destination => 'mame.db', ignore => 1});
	}
	else {
		$test->add_file({ source => 'mame.db', destination => 'mame.db', result => 'mame.db'});
	}

	return 1;
}


sub post_run_program {
	my ($test, $hook) = @_;

	if ($roms_uncompressed) {
		map { s,((?:extra|extradir|moreroms|needed|roms|samples|search|unknown)/[^ :]*)\.zip,$1,g; } @{$test->{expected_stdout}};
	}
        my $exclude_tag = ($roms_uncompressed ? 'ZIP' : 'DIR');
        $test->{expected_stderr} = [ map { s/^<[A-Z]*> //; $_; } grep { $_ !~ /^<$exclude_tag> /; } @{$test->{expected_stderr}} ];

	return 1;
}


sub post_copy_file {
	my ($test, $hook) = @_;
	
	if ($test->{test}->{mkdbargs}) {
		my $ret = system('../../src/mkmamedb', @{$test->{test}->{mkdbargs}});
		# TODO: capture stdout/stderr
		return $ret == 0 ? 1 : undef;
	}
	if (! -d 'roms') {
		mkdir('roms');
	}

	if (defined($test->{test}->{'ckmamedb-before'})) {
		for my $args (@{$test->{test}->{'ckmamedb-before'}}) {
			my ($dir, $dump) = @$args;
			my $dump_file = $test->find_file($dump);
			return undef unless (defined($dump));

			unless (system('../dbrestore', '-t', 'ckmamedb', "$dump_file", "$dir/.ckmame.db") == 0) {
				print STDERR "can't restore ckmamedb dump $dump: $!";
				return undef;
			}
		}
	}

	return 1;
}


$test->add_directive(mkdbargs => { type => 'string...', once => 1 });
$test->add_directive('archive-types' => { type => 'string...', once => 1 });
$test->add_directive('ckmamedb-before' => { type => 'string string' });
$test->add_directive('ckmamedb-after' => { type => 'string string' });
$test->add_directive('no-hashes' => {
	type => 'string string string? string?',
	usage => 'directory archive [file] [hash-types]',
	description => 'Specify that certain hashes are missing from cachedb. If HASH-TYPES is ommitted, only crc is present; if FILE is ommitted, it applies to all files from ARCHIVE.'
});

$test->add_comparator('db/dump', \&comparator_db);
$test->add_comparator('zip/zip', \&comparator_zip);
$test->add_copier('zip/zip', \&copier_zip);

$test->add_hook('checks', \&checks);
$test->add_hook('mangle_program', \&mangle_program);
$test->add_hook('post_parse', \&post_parse);
$test->add_hook('post_list_files', \&post_list_files);
$test->add_hook('post_run_program', \&post_run_program);
$test->add_hook('post_copy_files', \&post_copy_file);

$test->setup(@ARGV);

my @results = ();

for my $archive_type (reverse sort @{$test->{test}->{'archive-types'}}) {
	next if ($ENV{SKIP_DIR} && $archive_type eq 'dir');
	if ($archive_type eq 'dir') {
		$roms_uncompressed = 1;
		if ($test->{test}->{program} =~ m/(ckmame|mamedb)$/) {
			unshift @{$test->{test}->{args}}, '-u';
		}
	}

	push @results, $test->runtest($archive_type);

	if ($archive_type eq 'dir') {
		$roms_uncompressed = 0;
		if ($test->{test}->{program} =~ m/ckmame$/) {
			shift @{$test->{test}->{args}};
		}
	}
}

$test->end(@results);
