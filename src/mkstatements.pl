#!/usr/bin/env perl

use strict;
use File::Basename;

my @hashes = qw(crc md5 sha1);

open S, "< $ARGV[0]" or die "can't open statement list $ARGV[0]: $!";
open C, "> $ARGV[1]" or die "can't create C file $ARGV[1]: $!";
open H, "> $ARGV[2]" or die "can't create H file $ARGV[2]: $!";

my $protect = $ARGV[0];
$protect =~ s,.*/,,;
$protect =~ s,[^A-Za-z0-9],_,g;
$protect = "HAD_\U$protect";

print H "#ifndef $protect\n";
print H "#define $protect\n\n";
print H "/* This file is autogenerated by " . basename($0) . " from " . basename($ARGV[0]) . " */\n\n";
print H "extern const char *dbh_stmt_sql[];\n\n";
print H "typedef enum {\n";

print C "/* This file is autogenerated by " . basename($0) . " from " . basename($ARGV[0]) . " */\n\n";
print C "const char *dbh_stmt_sql[] = {\n";

my $id = 0;

while (my $line = <S>) {
    chomp $line;

    next unless ($line =~ m/^#define\s+(\w+)\s+(\"[^\"]+\")/);

    my ($name, $stmt) = ($1, $2);

    my @stmts = expand_hashes(expand_size($stmt));

    print H "    DBH_STMT_$name = $id,\n";

    for $stmt (@stmts) {
	$stmt =~ s/\s\s+/ /g;
	$stmt =~ s/\s+\"$/\"/;
	print C qq{    $stmt,\n};
	$id++;
    }
}

print H "    DBH_STMT_MAX\n";
print H "} dbh_stmt_t;\n\n";
print H "#endif /* $protect */\n";

print C "};\n";

sub expand_hashes
{
    return expand_hash('crc', 0, expand_hash('md5', 1, expand_hash('sha1', 1, @_)));
}

sub expand_hash
{
    my ($hash, $keep_key, @stmts) = @_;

    my $short = $keep_key ? '@HASH@' : '';
    return expand('@HASH@', $short, "$short and (f.$hash = ? or f.$hash is null) ", @stmts);
}

sub expand_size
{
    return expand('@SIZE@', '', ' and size = ? ', @_);
}

sub expand
{
    my ($key, $short, $long, @stmts) = @_;

    return map { 
	my $with = $_;
	my $without = $_;
	$with =~ s/$key/$long/;
	$without =~ s/$key/$short/;
	if ($with eq $without) {
	    $without;
	}
	else {
	    ($without, $with);
	}
    } @stmts;
}

